// Класс JvmComprehension загружается через систему загрузчиков классов (ClassLoaders), 
// которые последовательно проверяют три уровня загрузки: bootstrap, platform и application.
// При нахождении класса на одном из уровней происходит его загрузка, включая проверку валидности кода,
// инициализацию статических полей и связывание ссылок на другие классы (если они есть).
// Метаданные загруженного класса сохраняются в области памяти Metaspace.

public class JvmComprehension {

    public static void main(String[] args) {
        // В стеке создается фрейм для метода main()
        int i = 1;                      // 1 Во фрейме main создается переменная i с примитивным значением 1
        Object o = new Object();        // 2 В стеке (фрейм main) создается ссылка o, указывающая на новый объект Object, 
                                        // который размещается в куче (heap)
        Integer ii = 2;                 // 3 Поскольку Integer - это объектный тип, в стеке (фрейм main) создается ссылка ii,
                                        // а в куче размещается объект Integer со значением 2
        printAll(o, i, ii);             // 4 В стеке создается новый фрейм для метода printAll().
                                        // Переменные o и ii передаются как ссылки на объекты в куче
        System.out.println("finished"); // 7 В стеке создается фрейм для println(), куда передается ссылка на строковый объект
                                        // "finished", который хранится в куче
    }

    // Программа выполняется последовательно, методы компилируются в машинный код и интерпретируются.
    // Сборщик мусора периодически удаляет из памяти недостижимые объекты, приостанавливая работу программы на время сборки.

    private static void printAll(Object o, int i, Integer ii) { //В стеке создается фрейм printAll(), содержащий:
                                        // - ссылки o и ii на объекты в куче
                                        // - переменную i с примитивным значением 1
        Integer uselessVar = 700;       // 5 В стеке (фрейм printAll) создается ссылка uselessVar, 
                                        // указывающая на объект Integer(700) в куче
        System.out.println(o.toString() + i + ii);  // 6 В стеке последовательно создаются фреймы для toString() и println().
                                        // В println передаются: ссылка на результат o.toString(), 
                                        // значение i и ссылка на объект ii
    }
}
